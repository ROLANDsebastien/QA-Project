[{"filePath":"/app/eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-backend/scripts/create-admin-mongo.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":24,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Script pour créer un utilisateur administrateur avec MongoDB\nconst mongoose = require('mongoose');\nconst { hash } = require('bcryptjs');\nconst readline = require('readline');\n\n// Configuration MongoDB\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/compta_db';\n\n// Définition du schéma User\nconst UserSchema = new mongoose.Schema(\n  {\n    name: { type: String, required: true },\n    email: { type: String, required: true, unique: true },\n    password: { type: String, required: true },\n    role: { type: String, default: 'user', enum: ['user', 'admin'] },\n  },\n  { timestamps: true }\n);\n\n// Création du modèle User\nlet User;\ntry {\n  User = mongoose.model('User');\n} catch (error) {\n  User = mongoose.model('User', UserSchema);\n}\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nasync function createAdminUser() {\n  try {\n    // Connexion à MongoDB\n    await mongoose.connect(MONGODB_URI, {\n      bufferCommands: false,\n    });\n    console.log('Connecté à MongoDB');\n    \n    // Demander les informations de l'administrateur\n    const name = await question('Nom complet: ');\n    const email = await question('Email: ');\n    const password = await question('Mot de passe: ');\n    \n    // Vérifier si l'utilisateur existe déjà\n    const existingUser = await User.findOne({ email });\n    \n    if (existingUser) {\n      // Si l'utilisateur existe, mettre à jour son rôle en admin\n      const updatedUser = await User.findByIdAndUpdate(\n        existingUser._id,\n        { role: 'admin' },\n        { new: true }\n      );\n      console.log(`L'utilisateur ${updatedUser.name} a été mis à jour avec le rôle d'administrateur.`);\n    } else {\n      // Sinon, créer un nouvel utilisateur avec le rôle admin\n      const hashedPassword = await hash(password, 12);\n      const newUser = await User.create({\n        name,\n        email,\n        password: hashedPassword,\n        role: 'admin'\n      });\n      console.log(`L'administrateur ${newUser.name} a été créé avec succès.`);\n    }\n  } catch (error) {\n    console.error('Erreur lors de la création de l\\'administrateur:', error);\n  } finally {\n    await mongoose.disconnect();\n    rl.close();\n  }\n}\n\nfunction question(query) {\n  return new Promise(resolve => {\n    rl.question(query, resolve);\n  });\n}\n\ncreateAdminUser();","usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-backend/scripts/create-admin.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Script pour créer un utilisateur administrateur avec MongoDB\nrequire(\"dotenv\").config({ path: \".env.local\" });\nconst mongoose = require(\"mongoose\");\nconst { hash } = require(\"bcryptjs\");\n\n// Configuration MongoDB\nconst MONGODB_URI =\n  process.env.MONGODB_URI || \"mongodb://localhost:27017/compta_db\";\n\n// Définition du schéma User\nconst UserSchema = new mongoose.Schema(\n  {\n    name: { type: String, required: true },\n    email: { type: String, required: true, unique: true },\n    password: { type: String, required: true },\n    role: { type: String, default: \"user\", enum: [\"user\", \"admin\"] },\n  },\n  { timestamps: true },\n);\n\n// Création du modèle User\nlet User;\ntry {\n  User = mongoose.model(\"User\");\n} catch (error) {\n  User = mongoose.model(\"User\", UserSchema);\n}\n\nasync function createAdminUser() {\n  try {\n    // Connexion à MongoDB\n    await mongoose.connect(MONGODB_URI, {\n      bufferCommands: false,\n    });\n    console.log(\"Connecté à MongoDB\");\n\n    // Informations de l'administrateur\n    const name = \"Admin\";\n    const email = \"admin@fmcompta.be\";\n    const password = await hash(\"admin123\", 10);\n\n    // Vérifier si l'utilisateur existe déjà\n    const existingUser = await User.findOne({ email });\n\n    if (existingUser) {\n      // Si l'utilisateur existe, mettre à jour son rôle en admin\n      existingUser.role = \"admin\";\n      await existingUser.save();\n      console.log(`Utilisateur ${email} mis à jour avec le rôle admin`);\n    } else {\n      // Créer un nouvel utilisateur admin\n      const newUser = new User({\n        name,\n        email,\n        password,\n        role: \"admin\",\n      });\n\n      await newUser.save();\n      console.log(`Nouvel utilisateur admin créé: ${email}`);\n    }\n\n    console.log(\"Opération terminée avec succès\");\n  } catch (error) {\n    console.error(\"Erreur lors de la création de l'utilisateur admin:\", error);\n  } finally {\n    // Fermer la connexion à MongoDB\n    await mongoose.disconnect();\n    console.log(\"Déconnecté de MongoDB\");\n  }\n}\n\n// Exécuter la fonction\ncreateAdminUser();\n","usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-backend/scripts/update-admin.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":28,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":28,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Script pour mettre à jour l'utilisateur administrateur avec les nouvelles informations\nrequire(\"dotenv\").config({ path: \".env.local\" });\nconst mongoose = require(\"mongoose\");\nconst { hash } = require(\"bcryptjs\");\n\n// Configuration MongoDB\n// Utiliser DATABASE_URL fourni par l'environnement du conteneur, sinon fallback (moins fiable en conteneur)\nconst MONGODB_URI =\n  process.env.DATABASE_URL ||\n  process.env.MONGODB_URI ||\n  \"mongodb://localhost:27017/compta_db\";\n\n// Définition du schéma User\nconst UserSchema = new mongoose.Schema(\n  {\n    name: { type: String, required: true },\n    email: { type: String, required: true, unique: true },\n    password: { type: String, required: true },\n    role: { type: String, default: \"user\", enum: [\"user\", \"admin\"] },\n  },\n  { timestamps: true },\n);\n\n// Création du modèle User\nlet User;\ntry {\n  User = mongoose.model(\"User\");\n} catch (error) {\n  User = mongoose.model(\"User\", UserSchema);\n}\n\nasync function updateAdminUser() {\n  try {\n    // Connexion à MongoDB\n    await mongoose.connect(MONGODB_URI, {\n      bufferCommands: false,\n    });\n    console.log(\"Connecté à MongoDB\");\n\n    // Informations de l'administrateur cible\n    const targetEmail = \"admin@fmcompta.be\";\n    const targetName = \"Admin\";\n    const targetPassword = await hash(\"admin123\", 10);\n\n    // Rechercher l'utilisateur par email\n    let user = await User.findOne({ email: targetEmail });\n\n    if (user) {\n      // L'utilisateur existe : le mettre à jour\n      user.name = targetName;\n      user.password = targetPassword;\n      user.role = \"admin\"; // S'assurer que le rôle est admin\n      await user.save();\n      console.log(\n        `Utilisateur existant mis à jour (${targetEmail}) avec le rôle admin.`,\n      );\n    } else {\n      // L'utilisateur n'existe pas : le créer\n      const newUser = new User({\n        name: targetName,\n        email: targetEmail,\n        password: targetPassword,\n        role: \"admin\",\n      });\n      await newUser.save();\n      console.log(`Nouvel utilisateur admin créé: ${targetEmail}`);\n    }\n\n    console.log(\"Opération terminée avec succès\");\n  } catch (error) {\n    // Gérer spécifiquement l'erreur de clé dupliquée au cas où (par exemple, condition de concurrence)\n    if (error.code === 11000) {\n      console.warn(\n        `Avertissement : L'email ${targetEmail} existe déjà (erreur de clé dupliquée interceptée). L'opération a peut-être déjà été effectuée.`,\n      );\n    } else {\n      console.error(\n        \"Erreur lors de la mise à jour/création de l'utilisateur admin:\",\n        error,\n      );\n    }\n  } finally {\n    // Fermer la connexion à MongoDB\n    await mongoose.disconnect();\n    console.log(\"Déconnecté de MongoDB\");\n  }\n}\n\n// Exécuter la fonction\nupdateAdminUser();\n","usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-backend/src/generate-hash.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-database/init-scripts/01-create-collections.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-database/init-scripts/02-ensure-admin.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-frontend/babel.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-frontend/coverage/lcov-report/block-navigation.js","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported).","line":1,"column":1,"severity":1,"nodeType":null,"fix":{"range":[0,20],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"/* eslint-disable */\nvar jumpToCode = (function init() {\n    // Classes of code we would like to highlight in the file view\n    var missingCoverageClasses = ['.cbranch-no', '.cstat-no', '.fstat-no'];\n\n    // Elements to highlight in the file listing view\n    var fileListingElements = ['td.pct.low'];\n\n    // We don't want to select elements that are direct descendants of another match\n    var notSelector = ':not(' + missingCoverageClasses.join('):not(') + ') > '; // becomes `:not(a):not(b) > `\n\n    // Selector that finds elements on the page to which we can jump\n    var selector =\n        fileListingElements.join(', ') +\n        ', ' +\n        notSelector +\n        missingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`\n\n    // The NodeList of matching elements\n    var missingCoverageElements = document.querySelectorAll(selector);\n\n    var currentIndex;\n\n    function toggleClass(index) {\n        missingCoverageElements\n            .item(currentIndex)\n            .classList.remove('highlighted');\n        missingCoverageElements.item(index).classList.add('highlighted');\n    }\n\n    function makeCurrent(index) {\n        toggleClass(index);\n        currentIndex = index;\n        missingCoverageElements.item(index).scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'center'\n        });\n    }\n\n    function goToPrevious() {\n        var nextIndex = 0;\n        if (typeof currentIndex !== 'number' || currentIndex === 0) {\n            nextIndex = missingCoverageElements.length - 1;\n        } else if (missingCoverageElements.length > 1) {\n            nextIndex = currentIndex - 1;\n        }\n\n        makeCurrent(nextIndex);\n    }\n\n    function goToNext() {\n        var nextIndex = 0;\n\n        if (\n            typeof currentIndex === 'number' &&\n            currentIndex < missingCoverageElements.length - 1\n        ) {\n            nextIndex = currentIndex + 1;\n        }\n\n        makeCurrent(nextIndex);\n    }\n\n    return function jump(event) {\n        if (\n            document.getElementById('fileSearch') === document.activeElement &&\n            document.activeElement != null\n        ) {\n            // if we're currently focused on the search input, we don't want to navigate\n            return;\n        }\n\n        switch (event.which) {\n            case 78: // n\n            case 74: // j\n                goToNext();\n                break;\n            case 66: // b\n            case 75: // k\n            case 80: // p\n                goToPrevious();\n                break;\n        }\n    };\n})();\nwindow.addEventListener('keydown', jumpToCode);\n","usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-frontend/coverage/lcov-report/prettify.js","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'ae' is assigned a value but never used.","line":2,"column":11414,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":11416,"suggestions":[{"messageId":"removeVar","data":{"varName":"ae"},"fix":{"range":[11430,11442],"text":""},"desc":"Remove unused variable 'ae'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'af' is assigned a value but never used.","line":2,"column":11438,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":11440,"suggestions":[{"messageId":"removeVar","data":{"varName":"af"},"fix":{"range":[11454,11468],"text":""},"desc":"Remove unused variable 'af'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'ag' is assigned a value but never used.","line":2,"column":11471,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":11473,"suggestions":[{"messageId":"removeVar","data":{"varName":"ag"},"fix":{"range":[11487,11499],"text":""},"desc":"Remove unused variable 'ag'."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-unused-vars","severity":1,"message":"'ae' is assigned a value but never used.","line":2,"column":14757,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":14759,"suggestions":[{"messageId":"removeVar","data":{"varName":"ae"},"fix":{"range":[14773,14798],"text":""},"desc":"Remove unused variable 'ae'."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-frontend/coverage/lcov-report/sorter.js","messages":[],"suppressedMessages":[{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":36,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-frontend/jest.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-frontend/next-i18next.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-frontend/next.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-frontend/postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-frontend/scripts/create-admin-mongo.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":24,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Script pour créer un utilisateur administrateur avec MongoDB\nconst mongoose = require('mongoose');\nconst { hash } = require('bcryptjs');\nconst readline = require('readline');\n\n// Configuration MongoDB\nconst MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/compta_db';\n\n// Définition du schéma User\nconst UserSchema = new mongoose.Schema(\n  {\n    name: { type: String, required: true },\n    email: { type: String, required: true, unique: true },\n    password: { type: String, required: true },\n    role: { type: String, default: 'user', enum: ['user', 'admin'] },\n  },\n  { timestamps: true }\n);\n\n// Création du modèle User\nlet User;\ntry {\n  User = mongoose.model('User');\n} catch (error) {\n  User = mongoose.model('User', UserSchema);\n}\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nasync function createAdminUser() {\n  try {\n    // Connexion à MongoDB\n    await mongoose.connect(MONGODB_URI, {\n      bufferCommands: false,\n    });\n    console.log('Connecté à MongoDB');\n    \n    // Demander les informations de l'administrateur\n    const name = await question('Nom complet: ');\n    const email = await question('Email: ');\n    const password = await question('Mot de passe: ');\n    \n    // Vérifier si l'utilisateur existe déjà\n    const existingUser = await User.findOne({ email });\n    \n    if (existingUser) {\n      // Si l'utilisateur existe, mettre à jour son rôle en admin\n      const updatedUser = await User.findByIdAndUpdate(\n        existingUser._id,\n        { role: 'admin' },\n        { new: true }\n      );\n      console.log(`L'utilisateur ${updatedUser.name} a été mis à jour avec le rôle d'administrateur.`);\n    } else {\n      // Sinon, créer un nouvel utilisateur avec le rôle admin\n      const hashedPassword = await hash(password, 12);\n      const newUser = await User.create({\n        name,\n        email,\n        password: hashedPassword,\n        role: 'admin'\n      });\n      console.log(`L'administrateur ${newUser.name} a été créé avec succès.`);\n    }\n  } catch (error) {\n    console.error('Erreur lors de la création de l\\'administrateur:', error);\n  } finally {\n    await mongoose.disconnect();\n    rl.close();\n  }\n}\n\nfunction question(query) {\n  return new Promise(resolve => {\n    rl.question(query, resolve);\n  });\n}\n\ncreateAdminUser();","usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-frontend/scripts/create-admin.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Script pour créer un utilisateur administrateur avec MongoDB\nrequire(\"dotenv\").config({ path: \".env.local\" });\nconst mongoose = require(\"mongoose\");\nconst { hash } = require(\"bcryptjs\");\n\n// Configuration MongoDB\nconst MONGODB_URI =\n  process.env.MONGODB_URI || \"mongodb://localhost:27017/compta_db\";\n\n// Définition du schéma User\nconst UserSchema = new mongoose.Schema(\n  {\n    name: { type: String, required: true },\n    email: { type: String, required: true, unique: true },\n    password: { type: String, required: true },\n    role: { type: String, default: \"user\", enum: [\"user\", \"admin\"] },\n  },\n  { timestamps: true },\n);\n\n// Création du modèle User\nlet User;\ntry {\n  User = mongoose.model(\"User\");\n} catch (error) {\n  User = mongoose.model(\"User\", UserSchema);\n}\n\nasync function createAdminUser() {\n  try {\n    // Connexion à MongoDB\n    await mongoose.connect(MONGODB_URI, {\n      bufferCommands: false,\n    });\n    console.log(\"Connecté à MongoDB\");\n\n    // Informations de l'administrateur\n    const name = \"Admin\";\n    const email = \"admin@fmcompta.be\";\n    const password = await hash(\"admin123\", 10);\n\n    // Vérifier si l'utilisateur existe déjà\n    const existingUser = await User.findOne({ email });\n\n    if (existingUser) {\n      // Si l'utilisateur existe, mettre à jour son rôle en admin\n      existingUser.role = \"admin\";\n      await existingUser.save();\n      console.log(`Utilisateur ${email} mis à jour avec le rôle admin`);\n    } else {\n      // Créer un nouvel utilisateur admin\n      const newUser = new User({\n        name,\n        email,\n        password,\n        role: \"admin\",\n      });\n\n      await newUser.save();\n      console.log(`Nouvel utilisateur admin créé: ${email}`);\n    }\n\n    console.log(\"Opération terminée avec succès\");\n  } catch (error) {\n    console.error(\"Erreur lors de la création de l'utilisateur admin:\", error);\n  } finally {\n    // Fermer la connexion à MongoDB\n    await mongoose.disconnect();\n    console.log(\"Déconnecté de MongoDB\");\n  }\n}\n\n// Exécuter la fonction\ncreateAdminUser();\n","usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-frontend/scripts/update-admin.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":25,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Script pour mettre à jour l'utilisateur administrateur avec les nouvelles informations\nrequire(\"dotenv\").config({ path: \".env.local\" });\nconst mongoose = require(\"mongoose\");\nconst { hash } = require(\"bcryptjs\");\n\n// Configuration MongoDB\nconst MONGODB_URI =\n  process.env.MONGODB_URI || \"mongodb://localhost:27017/compta_db\";\n\n// Définition du schéma User\nconst UserSchema = new mongoose.Schema(\n  {\n    name: { type: String, required: true },\n    email: { type: String, required: true, unique: true },\n    password: { type: String, required: true },\n    role: { type: String, default: \"user\", enum: [\"user\", \"admin\"] },\n  },\n  { timestamps: true },\n);\n\n// Création du modèle User\nlet User;\ntry {\n  User = mongoose.model(\"User\");\n} catch (error) {\n  User = mongoose.model(\"User\", UserSchema);\n}\n\nasync function updateAdminUser() {\n  try {\n    // Connexion à MongoDB\n    await mongoose.connect(MONGODB_URI, {\n      bufferCommands: false,\n    });\n    console.log(\"Connecté à MongoDB\");\n\n    // Nouvelles informations de l'administrateur\n    const name = \"Admin\";\n    const email = \"admin@fmcompta.be\";\n    const password = await hash(\"admin123\", 10);\n\n    // Vérifier si un utilisateur admin existe déjà\n    const existingAdmin = await User.findOne({ role: \"admin\" });\n\n    if (existingAdmin) {\n      // Mettre à jour l'utilisateur admin existant\n      existingAdmin.name = name;\n      existingAdmin.email = email;\n      existingAdmin.password = password;\n      await existingAdmin.save();\n      console.log(`Utilisateur admin mis à jour: ${email}`);\n    } else {\n      // Créer un nouvel utilisateur admin\n      const newUser = new User({\n        name,\n        email,\n        password,\n        role: \"admin\",\n      });\n\n      await newUser.save();\n      console.log(`Nouvel utilisateur admin créé: ${email}`);\n    }\n\n    console.log(\"Opération terminée avec succès\");\n  } catch (error) {\n    console.error(\n      \"Erreur lors de la mise à jour de l'utilisateur admin:\",\n      error,\n    );\n  } finally {\n    // Fermer la connexion à MongoDB\n    await mongoose.disconnect();\n    console.log(\"Déconnecté de MongoDB\");\n  }\n}\n\n// Exécuter la fonction\nupdateAdminUser();\n","usedDeprecatedRules":[]},{"filePath":"/app/fm-compta-consulting-frontend/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/app/qa/k6_script.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'response' is assigned a value but never used.","line":12,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":12,"endColumn":15,"suggestions":[{"messageId":"removeVar","data":{"varName":"response"},"fix":{"range":[213,264],"text":""},"desc":"Remove unused variable 'response'."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import http from \"k6/http\";\n\nexport let options = {\n  stages: [\n    { duration: \"30s\", target: 10 },\n    { duration: \"30s\", target: 50 },\n    { duration: \"0s\", target: 0 },\n  ],\n};\n\nexport default function () {\n  let response = http.get(\"https://httpbin.org/get\");\n  // Assuming there's a health endpoint; adjust if needed\n}\n","usedDeprecatedRules":[]}]